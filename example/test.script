local boxes = {}
local box_group = -1

local ray_start = vmath.vector3(0, 0, 0)
local ray_end = vmath.vector3(365, 370, 0)

local query_result = {}
local result_count = 0

local function add_box(box_pos)
    local pos = vmath.vector3(box_pos.x, box_pos.y, 0)
    local box = factory.create("/factory#box", pos)
    local sprite = msg.url(nil, box, "sprite")
    local boxlabel = msg.url(nil, box, "label")
    local size = go.get(sprite, "size")

    -- Insert AABB into the group.
    local box_proxy_id = daabbcc.insert_gameobject(box_group, box, size.x, size.y)

    label.set_text(boxlabel, box_proxy_id)
    local t = { pos = pos, box = box, sprite = sprite, size = size, proxy_id = box_proxy_id }
    table.insert(boxes, t)
end

function init(self)
    msg.post(".", "acquire_input_focus")



    -- New group for AABBs.
    box_group = daabbcc.new_group()

    -- Insert AABB into the group.
    add_box(vmath.vector3(260, 280, 0))
    add_box(vmath.vector3(250, 280, 0))
    add_box(vmath.vector3(525, 490, 0))
    add_box(vmath.vector3(650, 250, 0))
    add_box(vmath.vector3(500, 550, 0))
    add_box(vmath.vector3(600, 250, 0))
    add_box(vmath.vector3(550, 250, 0))
    add_box(vmath.vector3(600, 300, 0))
    add_box(vmath.vector3(600, 200, 0))
    add_box(vmath.vector3(700, 570, 0))

    -- Move and update position
    boxes[2].pos.x = boxes[2].pos.x + 50
    boxes[2].pos.y = boxes[2].pos.y + 50
    go.set_position(boxes[2].pos, boxes[2].box)

    -- Updates the AABB position and size when you change it is position or size.
    daabbcc.update_aabb(box_group, boxes[2].proxy_id, boxes[2].pos.x, boxes[2].pos.y, boxes[2].size.x, boxes[2].size.y)

    -- Query the possible overlaps using AABB. Returns itself.
    query_result, result_count = daabbcc.query_aabb(box_group, boxes[2].pos.x, boxes[2].pos.y, boxes[2].size.x,
        boxes[2].size.y)

    print(result_count)
    if query_result then
        pprint(query_result)
    end

    go.animate(boxes[5].box, "position.x", go.PLAYBACK_LOOP_PINGPONG, boxes[7].pos.x + 150, go.EASING_INOUTBACK, 2)
end

function update(self, dt)
    --  pprint(dt)
    msg.post("@render:", "draw_line", { start_point = ray_start, end_point = ray_end, color = vmath.vector4(1, 1, 1, 1) })

    --  raycast_sort
    query_result, result_count = daabbcc.raycast_sort(box_group, ray_start.x, ray_start.y, ray_end.x, ray_end.y)
    if query_result then
        print("raycast_sort")
        print(result_count)
        pprint(query_result)
    end

    --  raycast
    query_result, result_count = daabbcc.raycast(box_group, ray_start.x, ray_start.y, ray_end.x, ray_end.y)
    if query_result then
        print("raycast")
        print(result_count)
        pprint(query_result)
    end

    --  query_id_sort
    query_result, result_count = daabbcc.query_id_sort(box_group, boxes[5].proxy_id)
    if query_result then
        print("query_id_sort")
        print(result_count)
        pprint(query_result)
    end

    --  query_sort
    query_result, result_count = daabbcc.query_aabb_sort(box_group, boxes[3].pos.x, boxes[3].pos.y, boxes[3].size.x,
        boxes[3].size.y)
    if query_result then
        print("query_sort")
        print(result_count)
        pprint(query_result)
    end

    --  query_id
    query_result, result_count = daabbcc.query_id(box_group, boxes[5].proxy_id)
    if query_result then
        print("query_id")
        print(result_count)
        pprint(query_result)
    end

    --  query
    query_result, result_count = daabbcc.query_aabb(box_group, boxes[3].pos.x, boxes[3].pos.y, boxes[3].size.x, boxes[3].size.y)
    if query_result then
        print("query")
        print(result_count)
        pprint(query_result)
    end
end

function on_input(self, action_id, action)
    -- Move and update position
    boxes[3].pos.x = action.x
    boxes[3].pos.y = action.y

    go.set_position(vmath.vector3(boxes[3].pos.x, boxes[3].pos.y, 0), boxes[3].box)
end
