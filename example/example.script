function init(self)
	msg.post("@render:", "use_camera_projection")
	profiler.enable_ui(true)
	profiler.set_ui_view_mode(profiler.VIEW_MODE_MINIMIZED)

	--se the powers of two for each category. Each category should be a unique power of two, allowing for clear and non-overlapping bitwise representations.
	local PLAYER      = 1 -- 00000000001 in binary (2^0)
	local ENEMY       = 2 -- 00000000010 in binary (2^1)
	local GROUND      = 4 -- 00000000100 in binary (2^2)
	local ITEM        = 8 -- 00000001000 in binary (2^3)
	local TRIGGER     = 16 -- 00000010000 in binary (2^4)
	local WALL        = 32 -- 00000100000 in binary (2^5)
	local PLATFORM    = 64 -- 00001000000 in binary (2^6)
	local PROJECTILE  = 128 -- 00010000000 in binary (2^7)
	local NPC         = 256 -- 00100000000 in binary (2^8)
	local ENVIRONMENT = 512 -- 01000000000 in binary (2^9)



	local collision_bits = {
		GROUND = 0x0001,
		TEAM1  = 0x0008,
		TEAM2  = 0x0013,

		ALL    = bit.bnot(0)
	}

	-- must be power of two
	local GROUND = 1
	local TEAM1 = 2
	local TEAM2 = 4
	local TEAM3 = 8


	local FLAG_A  = 1 -- 0001
	local FLAG_B  = 2 -- 0010
	local FLAG_C  = 4 -- 0100
	local ALL     = bit.bnot(0)

	local groupID = daabbcc.new_group(daabbcc.UPDATE_FULLREBUILD)

	local go_url  = msg.url("/test")
	local width   = 40
	local height  = 40

	local test    = daabbcc.insert_gameobject(groupID, go_url, width, height, FLAG_A)

	go_url        = msg.url("/test1")
	local test1   = daabbcc.insert_gameobject(groupID, go_url, width, height, FLAG_B)
	local groupID = daabbcc.new_group(daabbcc.UPDATE_FULLREBUILD)
	go_url        = msg.url("/test3")
	local test3   = daabbcc.insert_gameobject(groupID, go_url, width, height, FLAG_C)

	------------------
	go_url        = msg.url("/test2")
	local test2   = daabbcc.insert_gameobject(groupID, go_url, width, height, FLAG_A)
	print('\nTEAM1:', test, '\nTEAM2: ', test1, '\nTEAM3: ', test3, '\nNEVER: ', test2)

	local maskBits = bit.bor(FLAG_A, FLAG_C)
	print('maskBits:', maskBits)
	local result, count = daabbcc.query_id(groupID, test2, maskBits)

	print('count: ', count)

	if result then
		pprint(result)
	end


	local collision_bits = {
		GROUND = 0x00000001,
		TEAM1 = 0x00000002,
		TEAM2 = 0x00000004,
		TEAM3 = 0x00000008,

		ALL = bit.bnot(0)
	}


	local x = 0
	local y = 0
	local w = 100
	local h = 100
	local test_group_id = daabbcc.new_group(daabbcc.UPDATE_FULLREBUILD)

	--categoryBits
	local team1_proxy_id = daabbcc.insert_aabb(test_group_id, x, y, w, h, collision_bits.TEAM1)
	local team2_proxy_id = daabbcc.insert_aabb(test_group_id, x, y, w, h, collision_bits.TEAM2)
	local team3_proxy_id = daabbcc.insert_aabb(test_group_id, x, y, w, h, collision_bits.TEAM3)

	print('team1_proxy_id: ', team1_proxy_id)
	print('team2_proxy_id: ', team2_proxy_id)
	print('team3_proxy_id: ', team3_proxy_id)

	--maskBits
	local mask_bits = bit.bor(collision_bits.TEAM1)
	print(mask_bits)
	local result, count = daabbcc.query_aabb(test_group_id, x, y, w, h, mask_bits)
	print('-----:')
	print('count:', count)
	if result then
		for i = 1, count do
			print(result[i])
		end
	end


	local result, count = daabbcc.raycast(test_group_id, 300, 300, 0, 0, mask_bits)
	print('raycast-----:')
	print('count:', count)
	if result then
		for i = 1, count do
			print(result[i])
		end
	end

	daabbcc.run(false)
end
