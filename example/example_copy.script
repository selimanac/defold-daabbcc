function init(self)
	msg.post("@render:", "use_camera_projection")

	daabbcc.init(3, 128, 128, 128)


	local groupID = daabbcc.new_group(daabbcc.UPDATE_INCREMENTAL)
	print('id', groupID)

	daabbcc.remove_group(groupID);

	groupID = daabbcc.new_group(daabbcc.UPDATE_INCREMENTAL)
	print('new group id', groupID)

	local proxyID = daabbcc.insert_aabb(groupID, 10, 10, 100, 100, 1)
	print('proxyID', proxyID)



	local CollisionBits = {
		GROUND = 1,
		TEAM1 = 2,
		TEAM2 = 3,
		TEAM3 = 4,

		ALL = bit.bnot(0)
	}


	local maskBits = bit.bor(CollisionBits.GROUND, CollisionBits.TEAM1, CollisionBits.TEAM3)
	print('maskBits:', maskBits)
	local x = 10
	local y = 10
	local w = 100
	local h = 100
	proxyID = daabbcc.insert_aabb(groupID, x, y, w, h, maskBits)

	local go_url = msg.url("/test")
	local width = 50
	local height = 50

	local gameobjectProxyID = daabbcc.insert_gameobject(groupID, go_url, width, height, maskBits)

	daabbcc.update_aabb(groupID, proxyID, 20, 20, 125, 125)
	daabbcc.update_gameobject_size(groupID, gameobjectProxyID, 125, 125)
	print('proxyID', proxyID)

	print('----query_aabb')
	local result, count = daabbcc.query_aabb(groupID, 20, 20, 200, 200, maskBits)

	if result then
		for i = 1, count do
			print(result[i])
		end
	end
	print('----query_id')
	result, count = daabbcc.query_id(groupID, proxyID, maskBits)
	if result then
		for i = 1, count do
			print(result[i])
		end
	end
	print('----query_aabb_sort ')
	local result, count = daabbcc.query_aabb_sort(groupID, 20, 20, 200, 200, maskBits)

	if result then
		for i = 1, count do
			pprint(result[i])
		end
	end
	print('----')

	print('----query_id_sort ')
	local result, count = daabbcc.query_id_sort(groupID, proxyID, maskBits)

	if result then
		for i = 1, count do
			pprint(result[i])
		end
	end
	print('----')
	print('----raycast')
	local ray_start = vmath.vector3(0, 0, 0)
	local ray_end = vmath.vector3(20, 20, 0)

	local result, count = daabbcc.raycast(groupID, ray_start.x, ray_start.y, ray_end.x, ray_end.y, maskBits)

	if result then
		for i = 1, count do
			pprint(result[i])
		end
	end

	local result, count = daabbcc.raycast_sort(groupID, ray_start.x, ray_start.y, ray_end.x, ray_end.y, maskBits)

	if result then
		for i = 1, count do
			pprint(result[i])
		end
	end
	print('----reset')
	daabbcc.reset()

	local result, count = daabbcc.raycast_sort(groupID, ray_start.x, ray_start.y, ray_end.x, ray_end.y, maskBits)

	if result then
		for i = 1, count do
			pprint(result[i])
		end
	end
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
